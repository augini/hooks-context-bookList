{"version":3,"sources":["reducers/bookReducer.js","contexts/BookContext.js","components/Navbar.js","components/BookDetails.js","components/BookList.js","components/BookForm.js","App.js","serviceWorker.js","index.js"],"names":["bookReducer","state","action","type","title","book","author","id","uuidv4","filter","BookContext","createContext","BookContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","books","dispatch","useEffect","setItem","stringify","Provider","value","children","Navbar","useContext","className","length","BookDetails","onClick","BookList","map","key","BookForm","useState","setTitle","setAuthor","onSubmit","e","preventDefault","placeholder","onChange","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6NAEaA,EAAc,SAACC,EAAOC,GACjC,OAAOA,EAAOC,MACZ,IAAK,WACH,MAAM,GAAN,mBAAWF,GAAX,CAAkB,CAAEG,MAAOF,EAAOG,KAAKD,MAAOE,OAAQJ,EAAOG,KAAKC,OAAQC,GAAIC,iBAChF,IAAK,cACH,OAAOP,EAAMQ,QAAQ,SAAAJ,GAAI,OAAIA,EAAKE,KAAOL,EAAOG,KAAKE,MACvD,QACE,OAAON,ICNAS,EAAcC,0BAoBZC,EAlBa,SAACC,GAAW,IAAD,EAEXC,qBAAWd,EAAa,IAAI,WACpD,IAAMe,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,MAJR,mBAE9BK,EAF8B,KAEvBC,EAFuB,KAWrC,OAJAC,qBAAU,WACRN,aAAaO,QAAS,QAASL,KAAKM,UAAUJ,MAC9C,CAACA,IAGD,kBAACV,EAAYe,SAAb,CAAsBC,MAAS,CAACN,QAAOC,aACrCR,EAAMc,WCLGC,EAVA,WAAO,IACZR,EAAUS,qBAAWnB,GAArBU,MACR,OACE,yBAAKU,UAAU,UACb,kDACA,iDAAuBV,EAAMW,OAA7B,2BCJOC,EAAc,SAAC,GAAc,IAAZ3B,EAAW,EAAXA,KACpBgB,EAAaQ,qBAAWnB,GAAxBW,SASR,OACE,wBAAIY,QAAW,WARE,IAAC1B,IAQeF,EAAKE,GAPtCc,EAAU,CACRlB,KAAM,cACNE,KAAM,CAAEE,UAMR,yBAAKuB,UAAU,SAASzB,EAAKD,OAC7B,yBAAK0B,UAAU,UAAUzB,EAAKC,UCbvB4B,EAAW,WAAO,IACtBd,EAASS,qBAAWnB,GAApBU,MACP,OACGA,EAAMW,OACJ,yBAAKD,UAAU,aACb,4BACIV,EAAMe,KAAI,SAAC9B,GAAW,OAAS,kBAAC,EAAD,CAAa+B,IAAO/B,EAAKE,GAAIF,KAAQA,SAI1E,yBAAKyB,UAAU,SACd,qECXKO,EAAW,WAAO,IACrBhB,EAAaQ,qBAAWnB,GAAxBW,SADoB,EAEDiB,mBAAS,IAFR,mBAErBlC,EAFqB,KAEdmC,EAFc,OAGAD,mBAAS,IAHT,mBAGrBhC,EAHqB,KAGbkC,EAHa,KAY5B,OACE,0BAAMC,SARa,SAACC,GACpBA,EAAEC,iBACFtB,EAAS,CAAClB,KAAM,WAAYE,KAAM,CAACD,QAAOE,YAC1CkC,EAAU,IACVD,EAAS,MAKP,2BAAOpC,KAAK,OAAOyC,YAAc,QAAQlB,MAAQtB,EAAOyC,SAAY,SAACH,GAAD,OAAOH,EAASG,EAAEI,OAAOpB,QAAQqB,UAAQ,IAC7G,2BAAO5C,KAAK,OAAOyC,YAAc,SAASlB,MAAQpB,EAAQuC,SAAY,SAACH,GAAD,OAAOF,EAAUE,EAAEI,OAAOpB,QAAQqB,UAAQ,IAChH,2BAAO5C,KAAK,SAASuB,MAAO,aCFnBsB,MAZf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8539ae00.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const bookReducer = (state, action) => {\r\n  switch(action.type) {\r\n    case 'ADD_BOOK':\r\n      return [...state, { title: action.book.title, author: action.book.author, id: uuidv4()}];\r\n    case 'REMOVE_BOOK':\r\n      return state.filter( book => book.id !== action.book.id );\r\n    default:\r\n      return state;\r\n  }\r\n}","import React, {createContext, useReducer, useEffect} from 'react';\r\nimport {bookReducer} from '../reducers/bookReducer'\r\n\r\nexport const BookContext = createContext()\r\n\r\nconst BookContextProvider = (props) => {\r\n\r\n  const [books, dispatch] = useReducer(bookReducer, [], () => {\r\n    const localData = localStorage.getItem('books')\r\n    return localData ? JSON.parse(localData) : []\r\n  })\r\n\r\n  useEffect(() =>{\r\n    localStorage.setItem( 'books', JSON.stringify(books))\r\n  },[books])\r\n\r\n  return ( \r\n    <BookContext.Provider value = {{books, dispatch}}>\r\n     {props.children}\r\n    </BookContext.Provider>\r\n   );\r\n}\r\n \r\nexport default BookContextProvider;","import React, {useContext} from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\nconst Navbar = () => {\r\n  const { books } = useContext(BookContext)\r\n  return ( \r\n    <div className=\"navbar\">\r\n      <h1>Ninja Reading List</h1>\r\n      <p>Currently you have {books.length} books to get through</p>\r\n    </div>\r\n   );\r\n}\r\n \r\nexport default Navbar;","import React, {useContext} from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\n\r\nexport const BookDetails = ({ book }) => {\r\n  const { dispatch } = useContext(BookContext)\r\n  \r\n  const removeBook = (id) => {\r\n    dispatch( { \r\n      type: 'REMOVE_BOOK', \r\n      book: { id } \r\n      })\r\n  }\r\n\r\n  return ( \r\n    <li onClick = {() => {removeBook(book.id)}}>\r\n      <div className=\"title\">{book.title}</div>\r\n      <div className=\"author\">{book.author}</div>\r\n    </li>\r\n   );\r\n\r\n}\r\n ","import React, {useContext} from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\nimport {BookDetails} from './BookDetails'\r\n\r\nexport const BookList = () => {\r\n  const {books} = useContext(BookContext)\r\n  return ( \r\n     books.length ? (\r\n       <div className=\"book-list\">\r\n         <ul>\r\n           { books.map((book) => { return ( <BookDetails key = {book.id} book = {book}/>) })}\r\n         </ul>\r\n       </div>\r\n     ) : (\r\n       <div className=\"empty\">\r\n        <p> No books to read. Hello free time !</p> \r\n       </div>\r\n     ) \r\n    \r\n   );\r\n}\r\n ","import React, {useContext, useState} from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\n\r\nexport const BookForm = () => {\r\n  const { dispatch } = useContext(BookContext)\r\n  const [title, setTitle] =  useState('')\r\n  const [author, setAuthor] = useState('')\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    dispatch({type: 'ADD_BOOK', book: {title, author} })\r\n    setAuthor('')\r\n    setTitle('')\r\n  }\r\n\r\n  return ( \r\n    <form onSubmit = {handleSubmit}>\r\n      <input type=\"text\" placeholder = 'Title' value ={title} onChange = {(e) => setTitle(e.target.value)} required/>\r\n      <input type=\"text\" placeholder = 'Author' value ={author} onChange = {(e) => setAuthor(e.target.value)} required/>\r\n      <input type=\"submit\" value ='Submit'/>\r\n    </form>\r\n  );\r\n}\r\n ","import React from 'react';\r\nimport BookContextProvider from './contexts/BookContext';\r\nimport Navbar  from './components/Navbar'\r\nimport {BookList} from './components/BookList'\r\nimport { BookForm } from './components/BookForm';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <BookContextProvider>\r\n        <Navbar/>\r\n        <BookList/> \r\n        <BookForm/>\r\n      </BookContextProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}